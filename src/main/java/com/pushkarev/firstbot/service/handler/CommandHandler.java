package com.pushkarev.firstbot.service.handler;

import com.pushkarev.firstbot.service.factory.KeyboardFactory;
import com.pushkarev.firstbot.service.manager.FeedbackManager;
import com.pushkarev.firstbot.service.manager.HelpManager;
import com.pushkarev.firstbot.telegram.Bot;
import lombok.AccessLevel;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.util.List;

import static com.pushkarev.firstbot.service.data.Command.*;
import static com.pushkarev.firstbot.service.data.CallbackData.*;

@Slf4j
@Service
@FieldDefaults(level = AccessLevel.PRIVATE)

public class CommandHandler {

    final KeyboardFactory keyboardFactory;
    final FeedbackManager feedbackManager;
    final HelpManager helpManager;

    @Autowired
    public CommandHandler(KeyboardFactory keyboardFactory,
                          FeedbackManager feedbackManager,
                          HelpManager helpManager) {
        this.keyboardFactory = keyboardFactory;
        this.feedbackManager = feedbackManager;
        this.helpManager = helpManager;
    }

    public BotApiMethod<?> answer(Message message, Bot bot) {
        String command = message.getText();

        switch (command) {
            case START -> {
                return start(message);
            }
            case FEEDBACK_COMMAND -> {
                return feedbackManager.answerCommand(message);
            }
            case HELP_COMMAND -> {
                return helpManager.answerCommand(message);
            }
            default -> {
                return defaultAnswer(message);
            }
        }
    }

    private BotApiMethod<?> defaultAnswer(Message message) {
        return SendMessage.builder()
                .chatId(message.getChatId())
                .text("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞")
                .build();
    }

    private BotApiMethod<?> start(Message message) {
        log.info("Starting bot...{}", message.getText());
        return SendMessage.builder()
                .chatId(message.getChatId())
                .replyMarkup(keyboardFactory.getInlineKeyboardMarkup(
                        List.of("–ü–æ–º–æ—â—å", "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"),
                        List.of(2),
                        List.of(HELP, FEEDBACK)
                ))
                .text("""
                        üññ–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ Tutor-Bot, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–ø–∏—Ç–∏—Ç–æ—Ä–∞ –∏ —É—á–µ–Ω–∏–∫–∞.
                        
                        –ß—Ç–æ –±–æ—Ç —É–º–µ–µ—Ç?
                        üìå –°–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                        üìå –ü—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
                        üìå –í–≤–µ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
                        """)
                .build();
    }
}
